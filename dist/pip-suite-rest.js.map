{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/auth_state/AuthHttpResponseInterceptor.ts","src/auth_state/AuthStateDecorator.ts","src/auth_state/AuthStateInit.ts","src/auth_state/AuthStateService.ts","src/auth_state/IAuthStateService.ts","src/auth_state/index.ts","src/cache/DataCacheService.ts","src/cache/IDataCacheService.ts","src/cache/index.ts","src/data/DataModelService.ts","src/data/index.ts","src/index.ts","src/rest/RestService.ts","src/rest/index.ts"],"names":[],"mappings":"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","file":"pip-suite-rest.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { IAuthState } from './IAuthStateService';\nexport const UnauthorizedRedirect: string = 'pipUnauthorizedRedirect';\nexport const AccessDenyRedirect: string = 'pipAccessDenyRedirect';\n\nclass AuthHttpResponseInterceptor implements ng.IHttpInterceptor {\n    constructor(\n        private $q: ng.IQService, \n        private $rootScope: ng.IRootScopeService,\n        private $location: ng.ILocationService,\n        private $log: ng.ILogService\n    ) {\n        \"ngInject\";\n    }\n\n    public responseError = (rejection: any): ng.IPromise<any> => {\n        let toState: IAuthState = this.$rootScope[pip.services.StateVar] && this.$rootScope[pip.services.StateVar].name ? this.$rootScope[pip.services.StateVar].name : null;\n        let toParams: any = this.$rootScope[pip.services.StateVar] && this.$rootScope[pip.services.StateVar].params ? this.$rootScope[pip.services.StateVar].params : null;\n        // When server sends Non-authenticated response\n        switch (rejection.status) {\n            case 401:\n            case 440:\n                this.$log.error(\"Response Error 401\", rejection);\n                // Redirect to unauthorized state\n                this.$rootScope.$emit(UnauthorizedRedirect, { // todo var event end event params\n                    redirect_to: toState && toParams && toParams.redirect_to ? '' : this.$location.url(),\n                    toState: toState,\n                    toParams: toParams\n                });\n\n                break;\n            case 403:\n                this.$log.error(\"Response Error 403\", rejection);\n                // Redirect to unauthorized state\n                this.$rootScope.$emit(AccessDenyRedirect);\n\n                break;                \n            default:\n                this.$log.error(\"errors_unknown\", rejection);\n                break;\n        }\n\n        return this.$q.reject(rejection);\n    }\n}\n\nfunction configureAuthState($httpProvider: ng.IHttpProvider) {\n    $httpProvider.interceptors.push('pipAuthHttpResponseInterceptor');\n}\n\nangular\n    .module('pipAuthState')\n    .config(configureAuthState)\n    .service('pipAuthHttpResponseInterceptor', AuthHttpResponseInterceptor);\n\n\n\n","import { AuthStateConfig } from './IAuthStateService';\n\n// Decorator function to add redirect method to pipAuthState service\nfunction decorateStatesAuthStateService($delegate, $timeout) {\n    \"ngInject\";\n\n    $delegate.config = new AuthStateConfig();\n    $delegate.signinState = signinState;\n    $delegate.signoutState = signoutState;\n    $delegate.authorizedState = authorizedState;\n    $delegate.unauthorizedState = unauthorizedState;\n\n    $delegate.goToSignin = goToSignin;\n    $delegate.goToSignout = goToSignout;\n    $delegate.goToAuthorized = goToAuthorized;\n    $delegate.goToUnauthorized = goToUnauthorized;\n\n    return $delegate;\n    ////////////////////////////////\n\n    function signinState(value?: string): string {\n        if (value) {\n            this._config.signinState = value;\n        } return this._config.signinState;\n    }\n    function signoutState(value?: string): string {\n        if (value) {\n            this._config.signoutState = value;\n        } return this._config.signoutState;\n    }\n    function authorizedState(value?: string): string {\n        if (value) {\n            this._config.authorizedState = value;\n        } return this._config.authorizedState;\n    }\n    function unauthorizedState(value?: string): string {\n        if (value) {\n            this._config.unauthorizedState = value;\n        } return this._config.unauthorizedState;\n    }\n\n    function setSigninParams(params: any): any {\n        if (!params) return params;\n\n        if (!params.toParams) return params;\n\n        params.server_url = params.toParams.server_url ? params.toParams.server_url : null;\n        params.email = params.toParams.email ? params.toParams.email : null;\n        params.language = params.toParams.language ? params.toParams.language : 'en';\n\n        return params;\n    }\n\n    function goToSignin(params: any): void {\n        if (this._config.signinState == null) {\n            throw new Error('Signin state was not defined');\n        }\n\n        params = setSigninParams(params);\n        this.go(this._config.signinState, params);\n    }\n    function goToSignout(params: any): void {\n        if (this._config.signoutState == null) {\n            throw new Error('Signout state was not defined');\n        }\n\n        this.go(this._config.signoutState, params);\n    }\n    function goToAuthorized(params: any): void {\n        if (this._config.authorizedState == null) {\n            throw new Error('Authorized state was not defined');\n        }\n\n        this.go(this._config.authorizedState, params);\n    }\n    function goToUnauthorized(params: any): void {\n        if (this._config.unauthorizedState == null) {\n            throw new Error('Signin state was not defined');\n        }\n\n        this.go(this._config.unauthorizedState, params);\n    }\n}\n\n// Config function to decorate pipAuthState service\nfunction addStatesAuthtateDecorator($provide) {\n    \"ngInject\";\n\n    $provide.decorator('pipAuthState', decorateStatesAuthStateService);\n}\n\nangular\n    .module('pipAuthState')\n    .config(addStatesAuthtateDecorator);\n\n","import { IAuthStateService, IAuthState } from './IAuthStateService';\n\nfunction initAuthState(\n    $log: ng.ILogService,\n    $rootScope: ng.IRootScopeService,\n    $state: ng.ui.IStateService,\n    pipSession: pip.services.ISessionService,\n    pipAuthState: IAuthStateService\n\n) {\n\n    // Intercept routes\n    $rootScope.$on('$stateChangeStart', stateChangeStart);\n    // Process unauthorized access error\n    $rootScope.$on('pipUnauthorizedRedirect', unauthorizedRedirect);\n    // Process after state changed\n    $rootScope.$on('$stateChangeSuccess', stateChange);\n\n    function stateChange(event: ng.IAngularEvent, toState: angular.ui.IState,\n        toParams: any, fromState: angular.ui.IState, fromParams: any): void {\n        // Unset routing variable to disable page transition\n        $rootScope[pip.services.RoutingVar] = false;\n    }\n\n    function stateChangeStart(event: ng.IAngularEvent, toState: IAuthState, toParams: any,\n        fromState: IAuthState, fromParams: any): void {\n\n        // Implement redirect mechanism\n        if (pipAuthState.redirect && pipAuthState.redirect(event, toState, toParams, $rootScope)) {\n            return;\n        }\n\n        // If user is not authorized then switch to signin\n        if ((toState.auth || toState.auth === undefined) && !pipSession.isOpened()) {\n            event.preventDefault();\n\n            let redirectTo: string = pipAuthState.href(toState.name, toParams);\n\n            // Remove hashtag\n            if (redirectTo.length > 0 && redirectTo[0] == '#') {\n                redirectTo = redirectTo.substring(1);\n            }\n\n        //    <IAuthStateService>\n           pipAuthState.goToSignin({ redirect_to: redirectTo, toState: toState, toParams: toParams });\n\n            return;\n        }\n\n        // Move user to authorized page\n        if (toState.name == pipAuthState.unauthorizedState() && pipSession.isOpened()) {\n            event.preventDefault();\n            pipAuthState.goToAuthorized({});\n\n            return;\n        }\n    }\n\n    function unauthorizedRedirect(event: ng.IAngularEvent, params: any): void {\n        // pipAuthState.goToSignin(params);\n        pipAuthState.goToSignout(params);\n    }\n\n}\n\nfunction configureAuthState(pipTranslateProvider: pip.services.ITranslateProvider) {\n    // Switch to HTML5 routing mode\n    pipTranslateProvider.translations('en', {\n        'ERROR_SWITCHING': 'Error while switching route. Try again.'\n    });\n\n    pipTranslateProvider.translations('ru', {\n        'ERROR_SWITCHING': 'Ошибка при переходе. Попробуйте ещё раз.'\n    });\n}\n\nangular\n    .module('pipAuthState')\n    .config(configureAuthState)\n    .run(initAuthState);\n\n","import { IAuthStateService, IAuthStateProvider, AuthStateConfig, IAuthState } from './IAuthStateService';\n\nclass AuthStateProvider implements IAuthStateProvider {\n    private _service: IAuthStateService;\n    private _config: AuthStateConfig;\n    private _redirectedStates: any = {};\n\n    public state: Function;\n\n    constructor(\n        private $stateProvider: ng.ui.IStateProvider\n    ) {\n        \"ngInject\";\n\n        this._config = new AuthStateConfig();\n\n\n        this.state = (stateName: string, stateConfig: IAuthState) => {\n            if (stateName == null) {\n                throw new Error('stateName cannot be null');\n            }\n            if (stateConfig == null) {\n                throw new Error('stateConfig cannot be null');\n            }\n\n            // add resolver\n            if (stateConfig && (stateConfig.auth || stateConfig.authenticate)) {\n                stateConfig.resolve = stateConfig.resolve || {};\n            }\n\n            this.$stateProvider.state(stateName, stateConfig);\n\n            return this;\n        }\n    }\n\n    public redirect(fromState: string, toState: string) {\n        this._redirectedStates[fromState] = toState;\n    }\n\n    public get signinState(): string {\n        return this._config.signinState;\n    }\n\n    public set signinState(value: string) {\n        this._config.signinState = value || null;\n    }\n\n    public get signoutState(): string {\n        return this._config.signoutState;\n    }\n\n    public set signoutState(value: string) {\n        this._config.signoutState = value || null;\n    }\n    public get authorizedState(): string {\n        return this._config.authorizedState;\n    }\n\n    public set authorizedState(value: string) {\n        this._config.authorizedState = value || '/';\n    }\n    public get unauthorizedState(): string {\n        return this._config.unauthorizedState;\n    }\n\n    public set unauthorizedState(value: string) {\n        this._config.unauthorizedState = value || '/';\n    }\n\n    public $get($state: ng.ui.IStateService, $timeout: ng.ITimeoutService) {\n        \"ngInject\";\n\n        if (this._service == null) {\n            $state['_config'] = this._config;\n            $state['_redirectedStates'] = this._redirectedStates;\n            $state['redirect'] = redirect;\n        }\n\n        this._service = <IAuthStateService>$state;\n\n        return this._service;\n\n        function redirect(event, state, params) {\n            let toState = this._redirectedStates[state.name];\n            if (_.isFunction(toState)) {\n                toState = toState(state.name, params);\n\n                if (_.isNull(toState))\n                    throw new Error('Redirected toState cannot be null');\n            }\n            if (!!toState) {\n                $timeout(() => {\n                    event.preventDefault();\n                    this.transitionTo(toState, params, { location: 'replace' });\n                });\n\n                return true;\n            }\n\n            return false;\n        }\n    }\n}\n\nangular\n    .module('pipAuthState')\n    .provider('pipAuthState', AuthStateProvider);","export interface IAuthState extends angular.ui.IState {\n    auth?: boolean;\n    authenticate?: any;\n}\n\nexport class AuthStateConfig {\n    signinState: string = null;\n    signoutState: string = null;\n    authorizedState: string = '/';\n    unauthorizedState: string = '/';\n}\n\nexport interface IAuthStateService extends ng.ui.IStateService  {\n    signinState(value?: string): string;\n    signoutState(value?: string): string;\n    authorizedState(value?: string): string;\n    unauthorizedState(value?: string): string;\n\n    redirect(event: ng.IAngularEvent, toState: IAuthState, toParams: any, $rootScope: ng.IRootScopeService): any;\n    state(stateName: string, stateConfig: IAuthState): any;\n\n    goToSignin(params: any): void;\n    goToSignout(params: any): void;\n    goToAuthorized(params: any): void;\n    goToUnauthorized(params: any): void;\n}\n\nexport interface IAuthStateProvider extends ng.IServiceProvider {\n    redirect(fromState: string, toState: string);\n    signinState: string;\n    signoutState: string;\n    authorizedState: string;\n    unauthorizedState: string;\n}\n\n","angular\n    .module('pipAuthState', [\n        'ngResource',\n        'pipServices', \n        'LocalStorageModule'\n    ]);\n\n\nimport './AuthHttpResponseInterceptor';\nimport './AuthStateDecorator';\nimport './AuthStateInit';\nimport './IAuthStateService';\nimport './AuthStateService';\n\n\n\nexport * from './AuthHttpResponseInterceptor'\nexport * from './IAuthStateService'\n","import { CacheParams, IDataCacheService, IDataCacheProvider } from './IDataCacheService';\nimport { IDataModelService } from '../data/IDataModelService';\n\nclass DataCache implements IDataCacheService {\n    private CACHE_TIMEOUT = 10 * 60000; // 10 mins or make it configurable\n    private _cache: any;\n    private _timeout: number;\n\n    public constructor(\n        private $q: ng.IQService, \n        private pipDataModel: IDataModelService\n    ) {\n        \"ngInject\";\n\n        this._cache = {};\n    }\n\n    // Converts a string value into a numeric hash code\n    private hash(data: CacheParams): number {\n        let filteredData: CacheParams = <CacheParams>{};\n\n        // Filter only the generic parameters that can be relevant to the query\n        if (data != null) {\n            // filteredData.item = data.item;\n            // filteredData.id = data.id;\n            filteredData.filter = data.filter;\n            filteredData.search = data.search;\n            filteredData.start = data.start;\n            filteredData.take = data.take;\n            filteredData.skip = data.skip;\n            // filteredData.status = data.status;\n        }\n\n        let serializedFilter = angular.toJson(filteredData);\n\n        if (serializedFilter == null || serializedFilter.length === 0)\n            return 0;\n\n        let h: number = 0;\n        for (let i = 0, len = serializedFilter.length; i < len; i++) {\n            let chr = serializedFilter.charCodeAt(i);\n            h = ((h << 5) - h) + chr;\n            h |= 0; // Convert to 32bit integer\n        }\n\n        return h;\n    }\n\n    // Generates parameterized key\n    private generateKey(resource: string, params?: CacheParams): string {\n        let h: number = this.hash(params);\n        return resource + (h != 0 ? '_' + h : '');\n    };\n\n    // Clear the cache, globally or selectively\n    public clear(resource?: string): void {\n        if (resource == null) {\n            this._cache = {};\n        } else {\n            for (let key in this._cache) {\n                if (key == resource || key.startsWith(resource + '_')) {\n                    delete this._cache[key];\n                }\n            }\n        }\n    }\n\n    // Try to retrieve collection from the cache\n    public retrieve(resource: string, params?: CacheParams): any {\n        if (resource == null) throw new Error('Resource cannot be null');\n        if (resource == '') throw new Error('Resource cannot be empty');\n\n        let key: string = this.generateKey(resource, params);\n        let holder: any = this._cache[key];\n        if (holder == null) return null;\n\n        // If expired then cleanup and return null\n        if (holder.expire && _.now() - holder.expire > this.CACHE_TIMEOUT) {\n            delete this._cache[key];\n            return null;\n        }\n\n        return holder.data;\n    }\n\n    // Store collection into the cache\n    public store(resource: string, data: any, params?: CacheParams): void {\n        if (resource == null) throw new Error('Resource cannot be null');\n        if (resource == '') throw new Error('Resource cannot be empty');\n\n        this._cache[this.generateKey(resource, params)] = {\n            expire: _.now(),\n            data: data\n        };\n    }\n\n    // Store collection into the cache without expiration\n    public storePermanently(resource: string, data: any, params?: CacheParams): void {\n        if (resource == null) throw new Error('Resource cannot be null');\n        if (resource == '') throw new Error('Resource cannot be empty');\n\n        this._cache[this.generateKey(resource, params)] = {\n            expire: null,\n            data: data\n        };\n    }\n\n    // Remove collection from the cache\n    public remove(resource: string, params?: CacheParams): void {\n        if (resource == null) throw new Error('Resource cannot be null');\n        if (resource == '') throw new Error('Resource cannot be empty');\n\n        delete this._cache[this.generateKey(resource, params)];\n    };\n\n    public updateOne(resource: string, item: any, params?: CacheParams): void {\n        if (resource == null) throw new Error('Resource cannot be null');\n        if (item == null) return;\n\n        let data: any = this.retrieve(resource, params);\n\n        if (data != null) {\n            let isAdded = false;\n            let size = data.length;\n            for (let i = 0; i < size; i++) {\n                if (data[i].id == item.id) {\n                    data[i] = item;\n                    isAdded = true;\n\n                    return;\n                }\n            }\n            if (!isAdded) data.push(item);\n            this.store(resource, data, params);\n        }\n    }\n\n    // Tries to retrieve collection from the cache, otherwise load it from server\n    public retrieveOrLoad(params: CacheParams, successCallback?: (data: any) => void, errorCallback?: (err: any) => void): any {\n        if (params == null) throw new Error('params cannot be null');\n\n        let resource: string = params.resource; //(params.cache || params.resource);\n\n        // Retrieve data from cache\n        let filter: Function = params.filter;\n        let force: boolean = !!params.force;\n        let result: any = !force ? this.retrieve(resource, params) : null;\n        let deferred: any = this.$q.defer();\n        let method: string;\n        if (!!params.paging) {\n            method = 'page';\n        } else {\n            method = params.singleResult ? 'readOne' : 'read';\n        }\n        // Return result if it exists\n        if (result) {\n            if (filter) {\n                if (result.data) {\n                    result.data = filter(result.data);\n                } else {\n                    result = filter(result);\n                }\n            }\n            if (_.isFunction(successCallback)) { successCallback(result); }\n            deferred.resolve(result);\n\n            return deferred.promise;\n        }\n\n        this.pipDataModel[method](\n            params,\n            (data: any) => {\n                // Store data in cache and return\n                params.updatedItem ?\n                    this.updateOne(resource, data, params) :\n                    this.store(resource, data, params);\n                if (filter) data = filter(data);\n                deferred.resolve(data);\n\n                if (_.isFunction(successCallback)) { successCallback(data); }\n            },\n            (err: any) => {\n                // Return error\n                deferred.reject(err);\n                if (_.isFunction(errorCallback)) errorCallback(err);\n            }\n        );\n\n        // Return deferred object\n        return deferred.promise;\n    }\n\n    public removeOne(resource: string, item: any): void {\n        if (resource == null) throw new Error('Resource cannot be null');\n        if (item == null) return;\n\n        for (let key in this._cache) {\n            if (key == resource || key.startsWith(resource + '_')) {\n                let data: any = this._cache[key].data;\n                if (angular.isArray(data)) {\n                    for (let i = 0; i < data.length; i++) {\n                        if (data[i].id == item.id) {\n                            data.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // OBSOLETE - WILL BE REMOVED ONCE CODE IS REFACTORED\n    public decorateAddCallback(resource: string, params?: CacheParams, successCallback?: (data: any) => void): Function {\n        return (item: any) => {\n            if (!params || !params.notClearedCache) { this.clear(resource); }\n            if (_.isFunction(successCallback)) { successCallback(item); }\n        };\n    }\n\n    public decorateRemoveCallback(resource: string, params?: CacheParams, successCallback?: (data: any) => void): Function {\n        return (item: any) => {\n            this.removeOne(resource, params);\n            if (_.isFunction(successCallback)) { successCallback(item); }\n        };\n    }\n\n    public decorateUpdateCallback(resource: string, params?: CacheParams, successCallback?: (data: any) => void): Function {\n        return (item: any) => {\n            for (var key in this._cache) {\n                if (key == resource || key.startsWith(resource + '_')) {\n                    let data: any = this._cache[key].data;\n                    if (angular.isArray(data)) {\n                        for (var i = 0; i < data.length; i++) {\n                            if (data[i].id == item.id) {\n                                data[i] = item;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (_.isFunction(successCallback)) { successCallback(item); }\n        };\n    }\n\n    public setTimeout(newTimeout: number): number {\n        if (newTimeout) {\n            this.CACHE_TIMEOUT = newTimeout;\n        }\n        return this.CACHE_TIMEOUT;\n    }\n \n}\n\nclass DataCacheProvider implements IDataCacheProvider {\n    private _service: DataCache;\n\n    constructor() {\n    }\n\n    public $get($q: ng.IQService, pipDataModel: IDataModelService) {\n        \"ngInject\";\n\n        if (this._service == null) {\n            this._service = new DataCache($q, pipDataModel);\n        }\n        return this._service;\n    }\n}\n\nangular\n    .module('pipDataCache', [])\n    .provider('pipDataCache', DataCacheProvider);\n\n\n","export class CacheParams {\n    force?: boolean;\n    resource?: string;\n    // cache?: string; cache || resource\n    filter?: Function;\n    singleResult?: boolean;\n    // party_id: string;\n    // item?: any;\n    // id?: string;\n    search?: string;\n    start?: any;\n    take?: number;\n    skip?: number;\n    // status?: string;\n    notClearedCache?: boolean;\n    paging?: boolean;\n    updatedItem?: any;\n}\n\nexport interface IDataCacheService {\n    setTimeout(newTimeout: number): number;\n\n    store(resource: string, data: any, params?: CacheParams): void;\n    storePermanently(resource: string, data: any, params?: CacheParams): void;\n    retrieve(resource: string, params?: CacheParams): any;\n    retrieveOrLoad(params: CacheParams, successCallback?: (data: any) => void, errorCallback?: (err: any) => void): any;\n    updateOne(resource: string, item: any, params?: CacheParams): void;\n    remove(resource: string, params?: CacheParams): void;\n    removeOne(resource: string, item: any): void;\n    clear(resource?: string): void;\n\n    decorateAddCallback(resource: string, params?: CacheParams, successCallback?: (data: any) => void): Function;\n    decorateUpdateCallback(resource: string, params?: CacheParams, successCallback?: (data: any) => void): Function;\n    decorateRemoveCallback(resource: string, params?: CacheParams, successCallback?: (data: any) => void): Function;\n}\n\nexport interface IDataCacheProvider extends ng.IServiceProvider {}","angular\n    .module('pipDataCache', ['pipDataModel']);\n\nimport './DataCacheService';\nimport './IDataCacheService';\n\nexport * from './IDataCacheService';","import { IDataModelService, IDataModelProvider } from './IDataModelService';\nimport { IRestService } from '../rest/IRestService'\n\ndeclare var async: any;\n\n// Todo: Shall it be just an abstract class?\n// Todo: Use generics to make it type-safe\nclass DataModel implements IDataModelService {\n    public save;\n    public remove;\n    public query;\n    public get;\n    public readPage;\n    public queryPage;\n\n    constructor(\n        private $stateParams: angular.ui.IStateParamsService,\n        private pipRest: IRestService\n    ) {\n        \"ngInject\";\n        \n        this.save = this.update;\n        this.remove = this.delete;\n        this.query = this.read;\n        this.get = this.readOne;\n        this.readPage = this.page;\n        this.queryPage = this.page;\n    }\n\n    // Execute request to REST API\n    public execute(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        let t = params.transaction, tid;\n\n        if (t && !params.skipTransactionBegin) {\n            tid = params.transactionId = t.begin(\n                params.transactionOperation || 'PROCESSING'\n            );\n            if (!tid) return;\n        }\n\n        // return this.pipRest.resources[params.resource]()[params.operation](\n        return this.pipRest.getResource(params.resource)[params.operation](\n            params.item,\n            (result: any) => {\n                if (t && tid && t.aborted(tid)) return;\n                if (t && !params.skipTransactionEnd) t.end();\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (t) t.end(error);\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Create an object and add it to object collection\n    public create(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        params.transactionOperation = params.transactionOperation || 'SAVING';\n        params.operation = params.operation || 'save';\n\n        return this.execute(\n            params,\n            (result: any) => {\n                if (params.itemCollection)\n                    params.itemCollection.push(result);\n\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Update an object and replace it in object collection\n    public update(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        params.transactionOperation = params.transactionOperation || 'SAVING';\n        params.operation = params.operation || 'update';\n\n        return this.execute(\n            params,\n            (result: any) => {\n                if (params.itemCollection)\n                    var index = _.findIndex(params.itemCollection, function (item: any) {\n                        return item.id == result.id;\n                    });\n                if (index > -1) {\n                    params.itemCollection[index] = result;\n                }\n\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Update an object and remove it from object collection\n    public delete(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        params.transactionOperation = params.transactionOperation || 'SAVING';\n        params.operation = params.operation || 'remove';\n\n        return this.execute(\n            params,\n            (result: any) => {\n                if (params.itemCollection)\n                    _.remove(params.itemCollection, { id: result.id || (params.object || {}).id || (params.item || {}).id });\n\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Read a collection of objects\n    public read(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        params.transactionOperation = params.transactionOperation || 'READING';\n        params.operation = params.operation || 'query';\n\n        return this.execute(\n            params,\n            (result: any) => {\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Read a single object and add it into collection\n    public readOne(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        params.transactionOperation = params.transactionOperation || 'READING';\n        params.operation = params.operation || 'page';\n\n        return this.execute(\n            params,\n            (result: any) => {\n                if (params.itemCollection && result) {\n                    var index = _.findIndex(params.itemCollection, { id: result.id });\n                    if (index >= 0) params.itemCollection[index] = result;\n                    else params.itemCollection.push(result);\n                }\n\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Read a page and add results into object collection\n    public page(params: any, successCallback?: (result: any) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        params.transactionOperation = params.transactionOperation || 'READING';\n        params.operation = params.operation || 'page';\n\n        return this.execute(\n            params,\n            (result: any) => {\n                if (params.itemCollection && result.data) {\n                    for (var i = 0; i < result.data.length; i++)\n                        params.itemCollection.push(result.data[i]);\n                }\n\n                if (successCallback) successCallback(result);\n            },\n            (error: any) => {\n                if (errorCallback) errorCallback(error);\n            }\n        );\n    }\n\n    // Save picture and document files\n    public uploadFiles(params: any, successCallback?: () => void,\n        errorCallback?: (error: any) => void): ng.IPromise<{}> {\n\n        var t = params.transaction, tid;\n\n        // Start transaction if necessary\n        if (t && !params.skipTransactionBegin) {\n            tid = params.transactionId = t.begin(\n                params.transactionOperation || 'SAVING'\n            );\n            if (!tid) return;\n        }\n\n        var uploadFiles = [{\n            pictures: params.pictures,\n            documents: params.documents\n        }];\n\n        // from content\n        if (params.item && params.item.content) {\n            var saveResult = true;\n            async.eachSeries(_.union(params.item.content, uploadFiles),\n                (obj, callback) => {\n                    // не выбран - пропускаем этот item  || нет этого события action\n                    if (!obj.pictures && !obj.documents) {\n                        callback();\n                    } else {\n                        if (obj.pictures) {\n                            // Save pictures first\n                            obj.pictures.save(\n                                () => {\n                                    if (t && tid && t.aborted(tid)) {\n                                        saveResult = false;\n                                        callback('aborted');\n                                    }\n                                    // Save documents second\n                                    if (obj.documents) {\n                                        obj.documents.save(\n                                            () => {\n                                                if (t && tid && t.aborted(tid)) {\n                                                    saveResult = false;\n                                                    callback('aborted');\n                                                }\n                                                callback();\n                                            },\n                                            (error: any) => {\n                                                saveResult = false;\n                                                callback(error);\n                                            }\n                                        );\n                                    } else {\n                                        callback();\n                                    }\n                                },\n                                (error: any) => {\n                                    saveResult = false;\n                                    callback(error);\n                                }\n                            );\n                        } else {\n                            if (obj.documents) {\n                                // Save documents first\n                                obj.documents.save(\n                                    () => {\n                                        if (t && tid && t.aborted(tid)) {\n                                            saveResult = false;\n                                            callback('aborted');\n                                        }\n                                        callback();\n                                    },\n                                    (error: any) => {\n                                        saveResult = false;\n                                        callback(error);\n                                    }\n                                );\n                            }\n                        }\n                    }\n                },\n                (error: any) => {\n                    if (!error && saveResult) {\n                        // удаляем ненужные объекты перед сохранением\n                        // вызываем колбек\n                        if (t && !params.skipTransactionEnd) t.end();\n                        _.each(params.item.content, function (item) {\n                            delete item.pictures;\n                            delete item.documents;\n                        });\n                        if (successCallback) successCallback();\n                    } else {\n                        // вызываем ошибочный колбек\n                        if (t) t.end(error);\n                        if (errorCallback) {\n                            errorCallback(error);\n                        }\n                    }\n                }\n            );\n        } else {\n            if (params.pictures) {\n                // Save pictures first\n                params.pictures.save(\n                    () => {\n                        if (t && tid && t.aborted(tid)) return;\n\n                        // Save documents second\n                        if (params.documents) {\n                            params.documents.save(\n                                () => {\n                                    if (t && tid && t.aborted(tid)) return;\n                                    // Do everything else\n                                    if (t && !params.skipTransactionEnd) t.end();\n                                    if (successCallback) successCallback();\n                                },\n                                (error: any) => {\n                                    if (t) t.end(error);\n                                    if (errorCallback) errorCallback(error);\n                                }\n                            );\n                        } else {\n                            // Do everything else\n                            if (t && !params.skipTransactionEnd) t.end();\n                            if (successCallback) successCallback();\n                        }\n                    },\n                    (error: any) => {\n                        if (t) t.end(error);\n                        if (errorCallback) errorCallback(error);\n                    }\n                );\n            } else if (params.documents) {\n                // Save documents first\n                params.documents.save(\n                    () => {\n                        if (t && tid && t.aborted(tid)) return;\n                        // Do everything else\n                        if (t && !params.skipTransactionEnd) t.end();\n                        if (successCallback) successCallback();\n                    },\n                    (error: any) => {\n                        if (t) t.end(error);\n                        if (errorCallback) errorCallback(error);\n                    }\n                );\n            } else {\n                // Do everything else\n                if (t && !params.skipTransactionEnd) t.end();\n                if (successCallback) successCallback();\n            }\n        }\n    }\n\n    // Abort transaction with file upload\n    public abortFilesUpload(params) {\n        if (params.pictures)\n            params.pictures.abort();\n        if (params.documents)\n            params.documents.abort();\n        if (params.transaction)\n            params.transaction.abort();\n    }\n}\n\nclass DataModelProvider implements IDataModelProvider {\n    private _service: IDataModelService;\n\n    constructor(\n    ) {\n        \"ngInject\";\n\n    }\n\n    public $get(\n        $stateParams: angular.ui.IStateParamsService,\n        pipRest: IRestService\n    ) {\n        \"ngInject\";\n        \n        if (this._service == null) {\n            this._service = new DataModel($stateParams, pipRest);\n        }\n\n        return this._service;\n    }\n}\n\nangular\n    .module('pipDataModel')\n    .provider('pipDataModel', DataModelProvider);","angular\n    .module('pipDataModel', ['pipRest']);\n\nimport './IDataModelService';\nimport './DataModelService';\n\nexport * from './IDataModelService';","\nimport './rest';\nimport './data';\nimport './cache';\nimport './auth_state';\n\nangular\n    .module('pipCommonRest', [\n        'pipDataCache',\n        'pipRest',\n        'pipDataModel',\n        'pipAuthState'\n\n    ]);\n\n\nexport * from './rest';\nexport * from './data';\nexport * from './cache';\nexport * from './auth_state';\n","\nimport {\n    IRestProvider,\n    IRestService,\n} from './IRestService';\n\nclass RestResourceConfig {\n    operation: string;\n    name: string;\n    path: string;\n    defaultParams: any;\n    actions: any\n};\n\nclass RestService implements IRestService {\n    private _resources: any = {};\n    private _serverUrl: string;\n    private _lockServerUrl: boolean;\n\n    constructor(\n        private $resource: ng.resource.IResourceService,\n        private $http: ng.IHttpService,\n        private $stateParams: ng.ui.IStateParamsService,\n        serverUrl: string,\n        lockServerUrl: boolean,\n        private resourceConfigs: RestResourceConfig[]\n    ) {\n        \"ngInject\";\n\n        this._serverUrl = serverUrl;\n        this._lockServerUrl = lockServerUrl;\n        this.initResources(resourceConfigs);\n    }\n\n    private reInitResource() {\n        this._resources = {};\n        this.initResources(this.resourceConfigs);        \n    }\n\n    private initResources(resourceConfigs: RestResourceConfig[]): void {\n        _.each(resourceConfigs, (resourceConfig) => {\n            let resource: any;\n            switch (resourceConfig.operation) {\n                case 'createResource':\n                    resource = this.createResource(this._serverUrl, resourceConfig.path, resourceConfig.defaultParams, resourceConfig.actions);\n                    break;\n                case 'createOperation':\n                    resource = this.createOperation(this._serverUrl, resourceConfig.path);\n                    break;\n                case 'createCollection':\n                    resource = this.createCollection(this._serverUrl, resourceConfig.path, resourceConfig.defaultParams);\n                    break;\n                case 'createPagedCollection':\n                    resource = this.createPagedCollection(this._serverUrl, resourceConfig.path, resourceConfig.defaultParams);\n\n                    break;\n                case 'createPartyCollection':\n                    resource = this.createPartyCollection(this._serverUrl, resourceConfig.path, resourceConfig.defaultParams);\n                    break;\n            }\n\n            if (resource) {\n                this._resources[resourceConfig.name] = resource;\n            }\n        });\n    }\n\n    private createResource(url: string, path: string, defaultParams?: any, actions?: any) {\n        url = url || this._serverUrl;\n        return this.$resource(this._serverUrl + path, defaultParams, actions);\n    }\n\n    private createOperation(url: string, path: string) {\n        url = url || this._serverUrl;\n        return this.$resource(\n            url + path,\n            {},\n            {\n                call: { method: 'POST' }\n            }\n        );\n    }\n\n    private createCollection(url: string, path: string, defaultParams?: any) {\n        url = url || this._serverUrl;\n        return this.$resource(url + path,\n            defaultParams || { id: '@id' },\n            {\n                update: { method: 'PUT' }\n            }\n        );\n    }\n\n    private createPagedCollection(url: string, path: string, defaultParams?: any) {\n        url = url || this._serverUrl;\n        return this.$resource(url + path,\n            defaultParams || { id: '@id' },\n            {\n                page: { method: 'GET', isArray: false },\n                update: { method: 'PUT' }\n            }\n        );\n    }\n\n    private createPartyCollection(url: string, path: string, paramDefaults?: any) {\n        return this.createPagedCollection(url, path, paramDefaults ||\n            {\n                id: '@id',\n                party_id: '@party_id'\n            }\n        );\n    }\n\n    public get serverUrl(): string {\n        return this._serverUrl;\n    }\n\n    public set serverUrl(value: string) {\n        this._serverUrl = value;\n        this.reInitResource();\n    }\n\n    public get lockServerUrl(): boolean {\n        return this._lockServerUrl;\n    }\n\n    public set lockServerUrl(value: boolean) {\n        this._lockServerUrl = value;\n    }\n\n    public setHeaders(headers: any) {\n        for (let header in headers) {\n            if (headers.hasOwnProperty(header) && !_.isObject(headers[header])) {\n                this.$http.defaults.headers.common[header] = headers[header];\n            }\n        }\n    }\n\n    public getResource(name: string): any {\n        let resource = this._resources[name];\n        if (!resource)\n            throw new Error('Resource not found');\n\n        return resource;\n    }\n\n}\n\nclass RestProvider implements IRestProvider {\n    private _service: IRestService;\n\n    private _http: ng.IHttpProvider;\n    private _serverUrl: string;\n    private _lockServerUrl: boolean;\n    private _resourceConfigs: RestResourceConfig[] = [];\n\n    constructor($httpProvider: ng.IHttpProvider) {\n        this._http = $httpProvider;\n    }\n\n    public get serverUrl(): string {\n        return this._serverUrl;\n    }\n\n    public set serverUrl(value: string) {\n        this._serverUrl = value;\n    }\n\n    public get lockServerUrl(): boolean {\n        return this._lockServerUrl;\n    }\n\n    public set lockServerUrl(value: boolean) {\n        this._lockServerUrl = value;\n    }\n\n    public setHeaders(headers: any) {\n        for (let header in headers) {\n            if (headers.hasOwnProperty(header))\n                this._http.defaults.headers.common[header] = headers[header];\n        }\n    }\n\n    public registerResource(name: string, path: string, defaultParams?: any, actions?: any): void {\n        this._resourceConfigs.push({\n            operation: 'createResource',\n            name: name,\n            path: path,\n            defaultParams: defaultParams || null,\n            actions: actions || null\n        });\n    }\n    public registerOperation(name: string, path: string, defaultParams?: any, actions?: any): void {\n        this._resourceConfigs.push({\n            operation: 'createOperation',\n            name: name,\n            path: path,\n            defaultParams: defaultParams || null,\n            actions: actions || null\n        });\n    }\n\n    public registerCollection(name: string, path: string, defaultParams?: any, actions?: any): void {\n        this._resourceConfigs.push({\n            operation: 'createCollection',\n            name: name,\n            path: path,\n            defaultParams: defaultParams || null,\n            actions: actions || null\n        });\n    }\n\n    public registerPagedCollection(name: string, path: string, defaultParams?: any, actions?: any): void {\n        this._resourceConfigs.push({\n            operation: 'createPagedCollection',\n            name: name,\n            path: path,\n            defaultParams: defaultParams || null,\n            actions: actions || null\n        });\n    }\n\n    public registerPartyCollection(name: string, path: string, defaultParams?: any, actions?: any): void {\n        this._resourceConfigs.push({\n            operation: 'createPartyCollection',\n            name: name,\n            path: path,\n            defaultParams: defaultParams || null,\n            actions: actions || null\n        });\n    }\n\n    public $get(\n        $resource: ng.resource.IResourceService,\n        $http: ng.IHttpService,\n        $stateParams: angular.ui.IStateParamsService\n    ) {\n        \"ngInject\";\n\n        if (this._service == null)\n            this._service = new RestService($resource, $http, $stateParams, this._serverUrl, this._lockServerUrl, this._resourceConfigs);\n\n        return this._service;\n    }\n}\n\nangular\n    .module('pipRest')\n    .provider('pipRest', RestProvider);\n\n\n","angular\n    .module('pipRest', [ 'ngResource']);\n\n\nimport './IRestService';\nimport './RestService';\n\nexport * from './IRestService';"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}